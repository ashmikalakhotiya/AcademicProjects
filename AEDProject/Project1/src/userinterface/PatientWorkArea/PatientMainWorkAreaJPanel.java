/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Patient.VitalSignSensor;
import Business.UserAccount.UserAccount;
import Business.Utils.DataUtil;
import Business.WorkQueue2.WorkRequest2;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JPanel;

/**
 *
 * @author CUTIE
 */
public class PatientMainWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private PatientOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Patient patient;
    private EcoSystem business;
    private VitalSignSensor vs;
    private Network network;
    // public LabTestWorkRequest request1;
    Date datetemp = new Date();

    /**
     * Creates new form PatientMainWorkAreaJPanel
     */
    public PatientMainWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, PatientOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business = business;

        lblPatientName.setText(userAccount.getPatient().getPatientname());
        lblAssignedDoc.setText(String.valueOf(userAccount.getPatient().getAssigneddoctor()));
        vs = calculateAndShowRandomFigures();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPatientName = new javax.swing.JLabel();
        lblAssignedDoc = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnViewOrder = new javax.swing.JButton();
        btnOrderMedicine = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        lblPatientName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblPatientName.setText("jLabel4");

        lblAssignedDoc.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblAssignedDoc.setText("jLabel5");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Patient Name");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Assigned Doctor");

        jButton1.setBackground(new java.awt.Color(102, 102, 255));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Request Doctor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnViewOrder.setBackground(new java.awt.Color(102, 102, 255));
        btnViewOrder.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnViewOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnViewOrder.setText("View Orders");
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        btnOrderMedicine.setBackground(new java.awt.Color(102, 102, 255));
        btnOrderMedicine.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnOrderMedicine.setForeground(new java.awt.Color(255, 255, 255));
        btnOrderMedicine.setText("Order Medicine");
        btnOrderMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderMedicineActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 102, 255));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("View Vital Signs");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("PATIENT WORK AREA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(158, 158, 158)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblAssignedDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                        .addComponent(btnOrderMedicine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnViewOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(41, 41, 41)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel3)))
                .addContainerGap(296, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblPatientName))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblAssignedDoc))
                .addGap(31, 31, 31)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(btnOrderMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(btnViewOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PatientWorkAreaJPanel pwajp = new PatientWorkAreaJPanel(userProcessContainer, userAccount, organization, enterprise, business);
        userProcessContainer.add("PatientWorkAreaJPanel", pwajp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        ViewOrders vo = new ViewOrders(userProcessContainer, userAccount, organization, enterprise, business);
        userProcessContainer.add("ViewOrders", vo);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnViewOrderActionPerformed

    private void btnOrderMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderMedicineActionPerformed
        SelectStoreJPanel ssjp = new SelectStoreJPanel(userProcessContainer, enterprise, userAccount, business, organization);
        userProcessContainer.add("SelectStoreJPanel", ssjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnOrderMedicineActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        ManageVitalSignJPanel mvs = new ManageVitalSignJPanel(userProcessContainer, userAccount, organization, enterprise, business, vs);
        userProcessContainer.add("ManageVitalSignJPanel", mvs);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private VitalSignSensor calculateAndShowRandomFigures() {
        Patient pat = userAccount.getPatient();
        int patientAge = pat.getAge();
        int randomBP;
        int randomHR;
        int randomRR;

        if (patientAge >= 1 && patientAge <= 3) {
            randomBP = DataUtil.getRandomNumberBetweenRange(80, 112);
            randomHR = DataUtil.getRandomNumberBetweenRange(78, 130);
            randomRR = DataUtil.getRandomNumberBetweenRange(18, 32);

        } else if (patientAge >= 4 && patientAge <= 5) {
            randomBP = DataUtil.getRandomNumberBetweenRange(80, 112);
            randomHR = DataUtil.getRandomNumberBetweenRange(77, 120);
            randomRR = DataUtil.getRandomNumberBetweenRange(18, 32);
        } else if (patientAge >= 6 && patientAge <= 12) {
            randomBP = DataUtil.getRandomNumberBetweenRange(80, 120);
            randomHR = DataUtil.getRandomNumberBetweenRange(68, 112);
            randomRR = DataUtil.getRandomNumberBetweenRange(18, 32);
        } else {
            randomBP = DataUtil.getRandomNumberBetweenRange(108, 122);
            randomHR = DataUtil.getRandomNumberBetweenRange(54, 106);
            randomRR = DataUtil.getRandomNumberBetweenRange(10, 22);

        }

        VitalSignSensor vitalSign = pat.getVitalSignHistory().createAndAddVitalSign();
        vitalSign.setBloodPressure(randomBP);
        vitalSign.setHeartRate(randomHR);
        vitalSign.setRespiratoryRate(randomRR);
        vitalSign.setTimestamp(datetemp);
        Double weight = pat.getWeight();
        String status = VitalSignStatus(patientAge, vitalSign);
        vitalSign.setVitalSignStatus(status);
        sendRequest(status, vitalSign, pat);
        return vitalSign;
    }

    private String VitalSignStatus(int patientAge, VitalSignSensor vitalSign) {
        String vitalSignStatus = "Normal";

        int respirationRate = vitalSign.getRespiratoryRate();
        int heartRate = vitalSign.getHeartRate();
        int bloodPressure = vitalSign.getBloodPressure();


        /*Toddler*/
        if (patientAge >= 1 && patientAge <= 3) {
            if ((respirationRate < 20 || respirationRate > 30) /*Respiration Rate*/
                    || (heartRate < 80 || heartRate > 130) /*Heart Rate*/
                    || (bloodPressure < 80 || bloodPressure > 110)) { /*Blood Pressure*/


                vitalSignStatus = "Abnormal";
            }
        }
        /*Preschooler*/
        if (patientAge >= 4 && patientAge <= 5) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 80 || heartRate > 120)
                    || (bloodPressure < 80 || bloodPressure > 110)) {

                vitalSignStatus = "Abnormal";
            }
        }
        /*School Age*/
        if (patientAge >= 6 && patientAge <= 12) {
            if ((respirationRate < 20 || respirationRate > 30)
                    || (heartRate < 70 || heartRate > 110)
                    || (bloodPressure < 80 || bloodPressure > 120)) {

                vitalSignStatus = "Abnormal";
            }
        }
        /*Adolescent*/
        if (patientAge >= 13) {
            if ((respirationRate < 12 || respirationRate > 20)
                    || (heartRate < 55 || heartRate > 105)
                    || (bloodPressure < 110 || bloodPressure > 120)) {

                vitalSignStatus = "Abnormal";
            }
        }
        return vitalSignStatus;
    }

    private void sendRequest(String status, VitalSignSensor vs, Patient pat) {
        if (status.equals("Normal")) {
            return;
        } else {
            WorkRequest2 req = new WorkRequest2();
            req.setSender(userAccount);
            req.setRequestDate(datetemp);
            req.setStatus("Sent");
            req.setPatient(pat);
            req.setVs(vs);

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof LabOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue3().getWorkRequestList().add(req);
                userAccount.getWorkQueue3().getWorkRequestList().add(req);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOrderMedicine;
    private javax.swing.JButton btnViewOrder;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblAssignedDoc;
    private javax.swing.JLabel lblPatientName;
    // End of variables declaration//GEN-END:variables
}
