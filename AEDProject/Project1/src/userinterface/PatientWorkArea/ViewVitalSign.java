/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Patient.VitalSignSensor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue2.WorkRequest2;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author CUTIE
 */
public class ViewVitalSign extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private PatientOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Patient patient;
    private EcoSystem business;

    /**
     * Creates new form ViewVitalSign
     */
    public ViewVitalSign(JPanel userProcessContainer, UserAccount account, PatientOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.business = business;
        populateVitalSigns();
    }

    public void populateVitalSigns() {
        DefaultTableModel model = (DefaultTableModel) tblVitalSign.getModel();
        model.setRowCount(0);
        Patient pat = userAccount.getPatient();
        for (VitalSignSensor vs : pat.getVitalSignHistory().getHistory()) {
            Object row[] = new Object[5];
            row[0] = vs;
            row[1] = vs.getHeartRate();
            row[2] = vs.getRespiratoryRate();
            row[3] = vs.getBloodPressure();
            row[4] = vs.getVitalSignStatus();

            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVitalSign = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnBACK = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnAVS = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        tblVitalSign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TimeStamp", "Heart Rate", "Respiratory Rate", "Blood Pressure", "Abnormality Check"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVitalSign);
        if (tblVitalSign.getColumnModel().getColumnCount() > 0) {
            tblVitalSign.getColumnModel().getColumn(0).setResizable(false);
            tblVitalSign.getColumnModel().getColumn(1).setResizable(false);
            tblVitalSign.getColumnModel().getColumn(2).setResizable(false);
            tblVitalSign.getColumnModel().getColumn(3).setResizable(false);
            tblVitalSign.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(102, 102, 255));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("View Chart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnBACK.setBackground(new java.awt.Color(102, 102, 255));
        btnBACK.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnBACK.setForeground(new java.awt.Color(255, 255, 255));
        btnBACK.setText("<<  Back");
        btnBACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBACKActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("VITAL SIGNS HISTORY");

        btnAVS.setBackground(new java.awt.Color(102, 102, 255));
        btnAVS.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAVS.setForeground(new java.awt.Color(255, 255, 255));
        btnAVS.setText("View Result for Abnormal VitalSign");
        btnAVS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAVSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(346, 346, 346)
                                .addComponent(btnAVS, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnBACK, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(287, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAVS, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(112, 112, 112)
                .addComponent(btnBACK, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBACKActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBACKActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultCategoryDataset vitalSignDataset = new DefaultCategoryDataset();
        Patient patient = userAccount.getPatient();
        ArrayList<VitalSignSensor> vitalSignList = patient.getVitalSignHistory().getHistory();
        if (vitalSignList.isEmpty() || vitalSignList.size() == 1) {
            JOptionPane.showMessageDialog(this, "Atleast 2 vital sign records are needed to view chart", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (VitalSignSensor vitalSign : vitalSignList) {
            vitalSignDataset.addValue(vitalSign.getRespiratoryRate(), "RR", vitalSign.getTimestamp());
            vitalSignDataset.addValue(vitalSign.getHeartRate(), "HR", vitalSign.getTimestamp());
            vitalSignDataset.addValue(vitalSign.getBloodPressure(), "BP", vitalSign.getTimestamp());
        }

        JFreeChart vitalSignChart = ChartFactory.createBarChart3D("Vital Sign Chart", "Time Stamp", "Rate", vitalSignDataset, PlotOrientation.VERTICAL, true, false, false);
        vitalSignChart.setBackgroundPaint(Color.white);
        CategoryPlot vitalSignChartPlot = vitalSignChart.getCategoryPlot();
        vitalSignChartPlot.setBackgroundPaint(Color.lightGray);

        org.jfree.chart.axis.CategoryAxis vitalSignDomainAxis = vitalSignChartPlot.getDomainAxis();
        vitalSignDomainAxis.setCategoryLabelPositions(
                CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );

        NumberAxis vitalSignRangeAxis = (NumberAxis) vitalSignChartPlot.getRangeAxis();
        vitalSignRangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        ChartFrame chartFrame = new ChartFrame("Chart", vitalSignChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(500, 500);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAVSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAVSActionPerformed
        int selectedRowCount = tblVitalSign.getSelectedRowCount();
        if (selectedRowCount <= 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        int selectedRow = tblVitalSign.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a row", "ERROR ", JOptionPane.ERROR_MESSAGE);
        }
        VitalSignSensor vs = (VitalSignSensor) tblVitalSign.getValueAt(selectedRow, 0);
        if (vs.getVitalSignStatus().equals("Normal")) {
            JOptionPane.showMessageDialog(null, "Select Vital Sign with ABNORMAL Status", "ERROR ", JOptionPane.ERROR_MESSAGE);
        } else {

            Organization org = null;
            for (Organization organization1 : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization1 instanceof LabOrganization) {
                    org = organization1;
                    break;
                }
            }
            if (org != null) {
                for (WorkRequest2 wr : org.getWorkQueue3().getWorkRequestList()) {
                    if (wr.getRequestDate().equals(vs.getTimestamp())) {
                        ViewResultForAbnormalVS vrfavs = new ViewResultForAbnormalVS(userProcessContainer, userAccount, organization, enterprise, business, vs, wr);
                        userProcessContainer.add("ManageVitalSigns", vrfavs);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Lab Organization not Present", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAVSActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAVS;
    private javax.swing.JButton btnBACK;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblVitalSign;
    // End of variables declaration//GEN-END:variables
}
